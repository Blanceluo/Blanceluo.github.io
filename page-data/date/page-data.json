{"componentChunkName":"component---src-templates-blog-post-js","path":"/date/","result":{"data":{"site":{"siteMetadata":{"title":"🚀 忘言"}},"markdownRemark":{"id":"8c23956c-a6ed-506e-b693-524af09deddd","excerpt":"若创建一个 JavaScript Date实例，该实例将会呈现某个时刻。 Date 对象基于 Unix Time Stamp，即自 1970年1月1日 (UTC) 起经过的毫秒数。 对于在计算机世界里获取现实时间，每种语言都有各自的实现。 这里介绍的只是 JavaScript…","html":"<p>若创建一个 JavaScript Date实例，该实例将会呈现某个时刻。</p>\n<p>Date 对象基于 <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16\">Unix Time Stamp</a>，即自 1970年1月1日 (UTC) 起经过的毫秒数。</p>\n<p>对于在计算机世界里获取现实时间，每种语言都有各自的实现。</p>\n<p>这里介绍的只是 JavaScript 语言的实现，不光每种语言的实现有差异，实现的标准依据也有差异。</p>\n<h3>时间标准</h3>\n<p>光是时间标准便有:</p>\n<ul>\n<li>\n<p>GMT: Greenwich Mean Time 格林威治标准时间。</p>\n<p>这是以英国格林威治天文台根据地球自转与公转观测结果得出的时间，亦是格林威治当地时间，过去被当成世界标准时。</p>\n</li>\n<li>\n<p>UTC: Coordinated Universal Time 协调世界时。</p>\n<p>是目前最主要的世界时标准，以原子时秒长为基础，在时刻上尽量接近于格林威治标准时间，并通过不规则的加入闰秒来抵消地球自转变慢的影响，也是计算机语言实现日期时间最主要的依据。关于更多可访问 <a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6\">维基百科</a>。</p>\n</li>\n</ul>\n<p>不仅于此，还有获取日期时间后的格式化处理，也是会令我们产生困扰的一大因素。</p>\n<p>在 JS 中，如果要获取具体某个日期的时间戳可能会进行如下操作:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2020-12-02'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> timeStamp <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date: %o\\nts: %d'</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> timeStamp<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/*\n* date: Wed Dec 02 2020 08:00:00 GMT+0800 (中国标准时间)\n  ts: 1606867200000\n*/</span></code></pre></div>\n<p>若存在这样一个场景，需要判断在指定日期之前，做一些业务逻辑处理。如果我们以上面代码的方式去获取指定日期，便会溢出一个八小时的区间，这肯定是不严谨的甚至算是一个 BUG 了。</p>\n<p>那么，如此结果是为何呢？</p>\n<h3>new Date形参</h3>\n<p>我们知道，<code class=\"language-text\">Date()</code> 构造函数具有四种接受参数的形式。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 无参数 那么新的实例对象表示实例化时刻的日期时间。\n\n2. Unix 时间戳 如：1606867200000。\n\n3. dateString 表示日期的字符串值 如：&#39;2020-12-02&#39;。\n\n4. 分别提供日期与时间，以逗号分隔。</code></pre></div>\n<p>未完待续…</p>","frontmatter":{"title":"Date","time":"2020|11|07","date":"December 07, 2020","description":"一些关于日期对象的絮叨..."}},"previous":{"fields":{"slug":"/music/"},"frontmatter":{"title":"音乐于我"}},"next":{"fields":{"slug":"/ghAction/"},"frontmatter":{"title":"GitHub Actions 持续集成部署"}}},"pageContext":{"id":"8c23956c-a6ed-506e-b693-524af09deddd","previousPostId":"655b0e83-64e9-5367-864f-85f20d8bf91b","nextPostId":"75bec23c-2a72-523d-af3f-51b3d6d968b4"}},"staticQueryHashes":["2841359383","2932667297"]}