{"componentChunkName":"component---src-templates-blog-post-js","path":"/ghAction/","result":{"data":{"site":{"siteMetadata":{"title":"🚀 忘言"}},"markdownRemark":{"id":"75bec23c-2a72-523d-af3f-51b3d6d968b4","excerpt":"前言 本篇文章，是由作者在搭建博客时，略微涉及 GitHub Actions 的自动化持续集成部署后写下的。\n因此，您在阅读时，可能会发现诸多错误。如果存在，请与作者联系，十分感谢。 关于更多，您可以参考 GitHub Actions…","html":"<h3>前言</h3>\n<p>本篇文章，是由作者在搭建博客时，略微涉及 <strong>GitHub Actions</strong> 的自动化持续集成部署后写下的。\n因此，您在阅读时，可能会发现诸多错误。如果存在，请与作者联系，十分感谢。</p>\n<p>关于更多，您可以参考 <a href=\"https://docs.github.com/en/free-pro-team@latest/actions\"><strong>GitHub Actions</strong></a> 文档。</p>\n<p>此文章面向的是假定有一定计算机基础，了解某种或多种计算机语言，甚至掌握一些服务端环境配置经验的人群。</p>\n<h3>什么是 <a href=\"https://docs.github.com/cn/free-pro-team@latest/actions/guides/about-continuous-integration#%E5%85%B3%E4%BA%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90\">自动化持续集成</a></h3>\n<p>一个项目，在开发阶段结束后，进入测试阶段时。\n一般都会频繁的进行编译打包，将项目文件持续地发布更新到测试环境中去等操作。\n类似于这种重复性质较高的工作，人是情绪化的动物，超过一定的次数难免惹人焦躁。情绪生变，工作便容易出错。</p>\n<p>因此，若将这类性质的工作，交由某些服务或工具执行。而开发人员只需编辑一些相应的文件配置。如此这般，不仅简化了操作流程，对开发人员的体验更加友好。同时也大大降低了出错几率，工作质量也能得到一定的保证。</p>\n<p>当某个需求痛点的出现，定会催生出相应的解决途径。基于此，业界早已推出了一些成熟的解决方案。 如 Jenkins, Travis CI, Netlify, GitHub Actions…</p>\n<h3>它为作者带来了什么</h3>\n<p>作者在搭建个人博客时，对比了一些常见的博客框架。\nHexo，Hugo，VuePress 乃至于作者最终选择的 Gatsby。对于一篇博文的编辑，发布都需要经历以下几个流程。</p>\n<blockquote>\n<p>新建博文 —> 编译打包源码 —> 发布上线</p>\n</blockquote>\n<p>久而久之，不胜其烦。身为一位计算机行业编码人员，已深谙封装复用之便利，如何能够受得了这般的重复繁琐。加之作者博客源码托管在 GitHub 上，自然选择 GitHub Actions。</p>\n<p><strong>此为作者的配置文件，敏感处已隐去。特加入中文注释说明。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># GitHub Actions 配置文件以 YML 编写。</span>\n\n<span class=\"token comment\"># 工作流程名称 可选。若设置，将会出现在仓库的 Actions 下拉选项卡中。</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Gatsby Publish\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定触发工作流程文件的事件，此处为 push 事件。</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定触发工作流程文件的分支，此处为 master 分支。</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 一系列作业的组合</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># build 作业</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest <span class=\"token comment\"># 执行作业的虚拟环境</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 作业中的所有步骤</span>\n      <span class=\"token comment\"># uses 关键字将会使用社区中已封装好的操作</span>\n\n      <span class=\"token comment\"># 该操作将会检出仓库且将其下载到运行环境中</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\n      <span class=\"token comment\"># 该操作将会在运行环境中安装 Node 软件包。用以下方执行 NPM 命令</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"12.x\"</span> <span class=\"token comment\"># 指定 Node 版本</span>\n\n      <span class=\"token comment\"># run 关键字将会在运行环境中执行特定命令</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm i  <span class=\"token comment\"># 执行 npm i，安装依赖</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build <span class=\"token comment\"># 执行打包编译</span>\n\n      <span class=\"token comment\"># 该操作会将特定目录下的文件 push 到指定仓库的指定分支</span>\n      <span class=\"token comment\"># 作者这里创建了另外一个仓库存储编译后的项目文件</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v2.5.1\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># secrets.ACCESS_TOKEN</span>\n          <span class=\"token comment\"># 加密环境变量，用以虚拟环境下访问作者仓库</span>\n          <span class=\"token key atrule\">ACTIONS_DEPLOY_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.ACCESS_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">EXTERNAL_REPOSITORY</span><span class=\"token punctuation\">:</span> REPOSITORY <span class=\"token comment\"># 指定被 push 的仓库名</span>\n          <span class=\"token key atrule\">PUBLISH_BRANCH</span><span class=\"token punctuation\">:</span> master <span class=\"token comment\"># 指定被 push 的分支</span>\n          <span class=\"token key atrule\">PUBLISH_DIR</span><span class=\"token punctuation\">:</span> ./public <span class=\"token comment\"># 指定将要 push 的目录</span></code></pre></div>\n<p>到这里，只是实现了 自动 <strong>打包编译源码</strong> 的步骤。还剩下将编译后的文件自动发布到线上服务器。</p>\n<p>其实，这最后一步，无非便是实现 <strong>线上服务器特定目录能够在所对应的远程仓库文件发生变更后自动拉取到本地</strong>。我们可以借助 <a href=\"https://docs.github.com/en/free-pro-team@latest/github/extending-github/about-webhooks\">GitHub webhooks</a> 实现.</p>\n<h3>GitHub webhooks</h3>\n<p>只要在仓库或组织上执行特定的操作，便可触发。例如，您可以配置 webhooks 在以下情况下执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 推送到仓库\n2. 打开 pull request\n3. 构建 GitHub Pages 页面\n4. 添加新成员到团队</code></pre></div>\n<p>所以我们自动部署的实现步骤主要是：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 推送到仓库 (已实现)\n2. 触发 Hooks，发送指定请求到服务器\n3. 服务器接收到指定请求，执行自动部署脚本\n4. 自动部署脚本执行代码拉取，移动文件等完成网站更新部署的操作。</code></pre></div>\n<h4>1. 设置 WebHooks</h4>\n<p><img src=\"https://cdn.jsdelivr.net/gh/seewhite/cdns/imgs/hooks.png\" alt=\"设置 WebHooks\"></p>\n<h4>2. 编写服务脚本</h4>\n<p>作者在这里使用 Node 编写，当然，使用任意一种服务端语言皆可。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// server.js</span>\n\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> createHandler <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'github-webhook-handler'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// secret 与 GitHub Hooks 后台设置保持一致</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">createHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> secret<span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run_cmd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cmd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> spawn <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  child<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">buffer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> resp <span class=\"token operator\">+=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  child<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">callback</span> <span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'no such location'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">7000</span><span class=\"token punctuation\">)</span>\n\nhandler<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error:'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nhandler<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received a push event for %s to %s'</span><span class=\"token punctuation\">,</span>\n    event<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    event<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 执行自动部署脚本</span>\n    <span class=\"token function\">run_cmd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sh'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./deploy.sh'</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>3. 编写 shell 脚本</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 网站的根目录</span>\n<span class=\"token assign-left variable\">WEB_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">'xxx'</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"start deployment\"</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$WEB_PATH</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"fetching from remote...\"</span>\n\n<span class=\"token comment\"># 为了避免冲突，强制更新本地文件</span>\n<span class=\"token function\">git</span> fetch --all\n<span class=\"token function\">git</span> reset --hard origin/master</code></pre></div>\n<p>大体细节如此，当然实际还要视各自的项目细节而论。\n但不论如何变化，本质始终不会有很大的区别。</p>","frontmatter":{"title":"GitHub Actions 持续集成部署","time":"2020|11|08","date":"December 08, 2020","description":"解放双手，提高资料生产效率。😄"}},"previous":{"fields":{"slug":"/date/"},"frontmatter":{"title":"Date"}},"next":{"fields":{"slug":"/performance/"},"frontmatter":{"title":"Antd Design 样式文件引入优化"}}},"pageContext":{"id":"75bec23c-2a72-523d-af3f-51b3d6d968b4","previousPostId":"8c23956c-a6ed-506e-b693-524af09deddd","nextPostId":"27bb4b63-8d0b-53f0-a63a-c3559619318f"}},"staticQueryHashes":["2841359383","2932667297"]}