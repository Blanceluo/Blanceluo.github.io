{"componentChunkName":"component---src-templates-blog-post-js","path":"/performance/","result":{"data":{"site":{"siteMetadata":{"title":"🚀 忘言"}},"markdownRemark":{"id":"27bb4b63-8d0b-53f0-a63a-c3559619318f","excerpt":"作者负责的一个项目，使用的 UI 库为 Ant Design。 Ant Design 使用时必须引入一份组件 CSS/Less 样式文件，但是这份文件即使在编译后，体积达到了 500kb 左右。 该项目底层开发框架是作者基于 Webpack4.x 手动搭建的，做了一些细微的优化操作。最后编译打包产出只 3M…","html":"<p>作者负责的一个项目，使用的 UI 库为 Ant Design。</p>\n<p>Ant Design 使用时必须引入一份组件 CSS/Less 样式文件，但是这份文件即使在编译后，体积达到了 500kb 左右。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 引入样式, 作者起初是引入 Less 格式的</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'antd/dist/antd.css'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or 'antd/dist/antd.less'</span></code></pre></div>\n<p>该项目底层开发框架是作者基于 Webpack4.x 手动搭建的，做了一些细微的优化操作。最后编译打包产出只 3M 左右，通过 Gzip 压缩至 700kb左右。样式文件经 Gzip 后，虽体积大幅减少，其实在项目体积中的占比比例不会有太大改变。</p>\n<p>生产包输出：\n<img src=\"https://cdn.jsdelivr.net/gh/seewhite/cdns/imgs/all-size.png\"></p>\n<p>样式文件编译后大小：\n<img src=\"https://cdn.jsdelivr.net/gh/seewhite/cdns/imgs/antd-cdn.png\"></p>\n<p>该项目的设计规范是在基于 Antd Design 的基础上，自成一套主题设计。因此组件默认的主色调，警告色等等诸如此类都需要覆盖。</p>\n<p>比较粗暴的方式是通过样式类覆写，如此每个样式都得覆盖一次，实在是一点也不优雅。😀</p>\n<p>其实我们可以在 Webpack 所使用的 less-loader 中做一些处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  loader<span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    lessOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      modifyVars<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'primary-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#1983F9'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'success-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#36C626'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样便可以直接全局覆盖组件库中的默认色值了，但前提是样式文件是通过依赖引入的，而一旦通过依赖引入便不可避免会在编译打包时一并产出。若不想样式文件被编译进生产包里，可以通过 <code class=\"language-text\">link</code> 标签引入。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/antd@4.9.2/dist/antd.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>但是通过 <code class=\"language-text\">link</code> 引入，那么上面的在 <code class=\"language-text\">less-loader</code> 中的覆盖配置便失效。</p>\n<p>好像走入了一个死结，一环以一环为前提。</p>\n<p>不多时，突然想到在之前，阅读 Element UI 更新主题色的源码。其中的思路可以参考一下。</p>\n<p><strong>源码思路大体为：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 请求远程 CDN 样式文件。\n2. 使用正则替换样式文本中特定的色值。\n3. 创建一个 Style 标签，将样式文本插入。\n4. 将 Styles 标签插入到 DOM 中去，以此达到更新页面主题 CSS 目的。</code></pre></div>\n<p>实在是简单粗暴至极，令人叹为观止。</p>\n<p>由此启发，其实我只不过是需要一份已更改色值后的 CDN 样式文件，通过 link 引入即可。</p>\n<p><strong>说干就干，步骤如下：</strong></p>\n<ol>\n<li>获得一份编译后的初始 CDN 样式文件。<a href=\"https://cdn.jsdelivr.net/npm/antd@4.9.2/dist/antd.min.css\">jsdelivr</a> 便可提供。</li>\n<li>将样式文件，通过脚本，还是直接拿到编辑器中将特定色值替换成新值便可。</li>\n<li>将修改后的样式文件，上传到公司内部 CDN 或者是一些公益性质的 CDN 服务即可。</li>\n<li>通过 link 引入在线 CDN 链接，仅此而已。</li>\n</ol>\n<p><a href=\"https://www.jsdelivr.com/\">jsdelivr</a> 不仅可以提供资源链接，其实还可以作为一个公共 CDN 服务。</p>\n<p>它会自动抓取 Github，NPM 上的资源，并为资源提供一个在线的 CDN 链接访问。</p>\n<p>关于更多细节可参考 <a href=\"https://blog.naibabiji.com/skill/wordpress-jsdelivr-github.html\">WordPress最佳免费CDN：jsDelivr + Github</a>。</p>\n<p>至于使用 CDN 的好处，不再细说。</p>","frontmatter":{"title":"Antd Design 样式文件引入优化","time":"2020|11|10","date":"December 10, 2020","description":"追求极致是不变的永恒..."}},"previous":{"fields":{"slug":"/ghAction/"},"frontmatter":{"title":"GitHub Actions 持续集成部署"}},"next":null},"pageContext":{"id":"27bb4b63-8d0b-53f0-a63a-c3559619318f","previousPostId":"75bec23c-2a72-523d-af3f-51b3d6d968b4","nextPostId":null}},"staticQueryHashes":["2841359383","2932667297"]}