<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[🚀 忘言]]></title><description><![CDATA[见素的个人博客]]></description><link>https://gatsby-starter-blog-demo.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 08 Dec 2020 10:24:55 GMT</lastBuildDate><item><title><![CDATA[GitHub Actions 持续集成部署]]></title><description><![CDATA[前言 本篇文章，是由作者在搭建博客时，略微涉及 GitHub Actions 的自动化持续集成部署后写下的。
因此，您在阅读时，可能会发现诸多错误。如果存在，请与作者联系，十分感谢。 关于更多，您可以参考 GitHub Actions…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/ghAction/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/ghAction/</guid><pubDate>Tue, 08 Dec 2020 09:30:36 GMT</pubDate><content:encoded>&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;本篇文章，是由作者在搭建博客时，略微涉及 &lt;strong&gt;GitHub Actions&lt;/strong&gt; 的自动化持续集成部署后写下的。
因此，您在阅读时，可能会发现诸多错误。如果存在，请与作者联系，十分感谢。&lt;/p&gt;
&lt;p&gt;关于更多，您可以参考 &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/actions&quot;&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;&lt;/a&gt; 文档。&lt;/p&gt;
&lt;p&gt;此文章面向的是假定有一定计算机基础，了解某种或多种计算机语言，甚至掌握一些服务器环境配置经验的人群。&lt;/p&gt;
&lt;h3&gt;什么是 &lt;a href=&quot;https://docs.github.com/cn/free-pro-team@latest/actions/guides/about-continuous-integration#%E5%85%B3%E4%BA%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90&quot;&gt;自动化持续集成&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个项目，在开发阶段结束后，进入测试阶段时。
一般都会频繁的进行编译打包，将项目文件持续地发布更新到测试环境中去等操作。
类似于这种重复性质较高的工作，人是情绪化的动物，超过一定的次数难免惹人焦躁。情绪生变，工作便容易出错。&lt;/p&gt;
&lt;p&gt;因此，若将这类性质的工作，交由某些服务或工具执行。而开发人员只需编辑一些相应的文件配置。如此这般，不仅简化了操作流程，对开发人员的体验更加友好。同时也大大降低了出错几率，工作质量也能得到一定的保证。&lt;/p&gt;
&lt;p&gt;当某个需求痛点的出现，定会催生出相应的解决途径。基于此，业界早已推出了一些成熟的解决方案。 如 Jenkins, Travis CI, Netlify, GitHub Actions…&lt;/p&gt;
&lt;h3&gt;它为作者带来了什么&lt;/h3&gt;
&lt;p&gt;作者在搭建个人博客时，对比了一些常见的博客框架。
Hexo，Hugo，VuePress 乃至于作者最终选择的 Gatsby。对于一篇博文的编辑，发布都需要经历以下几个流程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新建博文 —&gt; 编译打包源码 —&gt; 发布上线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;久而久之，不胜其烦。身为一位计算机行业编码人员，已深谙封装复用之便利，如何能够受得了这般的重复繁琐。加之作者博客源码托管在 GitHub 上，自然选择 GitHub Actions。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此为作者的配置文件，敏感处已隐去。特加入中文注释说明。&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# GitHub Actions 配置文件以 YML 编写。&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 工作流程名称 可选。若设置，将会出现在仓库的 Actions 下拉选项卡中。&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Gatsby Publish

&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 指定触发工作流程文件的事件，此处为 push 事件。&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 指定触发工作流程文件的分支，此处为 master 分支。&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; master

&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 一系列作业的组合&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# build 作业&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest &lt;span class=&quot;token comment&quot;&gt;# 执行作业的虚拟环境&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 作业中的所有步骤&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# uses 关键字将会使用社区中已封装好的操作&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;# 该操作将会检出仓库且将其下载到运行环境中&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v1
      &lt;span class=&quot;token comment&quot;&gt;# 该操作将会在运行环境中安装 Node 软件包。用以下方执行 NPM 命令&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1
        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12.x&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 指定 Node 版本&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;# run 关键字将会在运行环境中执行特定命令&lt;/span&gt;

      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm i  &lt;span class=&quot;token comment&quot;&gt;# 执行 npm i，安装依赖&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm run build &lt;span class=&quot;token comment&quot;&gt;# 执行打包编译&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;# 该操作会将特定目录下的文件 push 到指定仓库的指定分支&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;# 作者这里创建了另外一个仓库存储编译后的项目文件&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; peaceiris/actions&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages@v2.5.1
        &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# secrets.ACCESS_TOKEN&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# 加密环境变量，用以虚拟环境下访问作者仓库&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;ACTIONS_DEPLOY_KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; secrets.ACCESS_TOKEN &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; REPOSITORY &lt;span class=&quot;token comment&quot;&gt;# 指定被 push 的仓库名&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;PUBLISH_BRANCH&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; master &lt;span class=&quot;token comment&quot;&gt;# 指定被 push 的分支&lt;/span&gt;
          &lt;span class=&quot;token key atrule&quot;&gt;PUBLISH_DIR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ./public &lt;span class=&quot;token comment&quot;&gt;# 指定将要 push 的目录&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;到这里，只是实现了 自动 &lt;strong&gt;打包编译源码&lt;/strong&gt; 的步骤。还剩下将编译后的文件自动发布到线上服务器。&lt;/p&gt;
&lt;p&gt;其实，这最后一步，无非便是实现 &lt;strong&gt;线上服务器特定目录能够在所对应的远程仓库文件发生变更后自动拉取到本地&lt;/strong&gt;。我们可以借助 &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/extending-github/about-webhooks&quot;&gt;GitHub webhooks&lt;/a&gt; 实现.&lt;/p&gt;
&lt;h3&gt;GitHub webhooks&lt;/h3&gt;
&lt;p&gt;只要在仓库或组织上执行特定的操作，便可触发。例如，您可以配置 webhooks 在以下情况下执行：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 推送到仓库
2. 打开 pull request
3. 构建 GitHub Pages 页面
4. 添加新成员到团队&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以我们自动部署的实现步骤主要是：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 推送到仓库 (已实现)
2. 触发 Hooks，发送指定请求到服务器
3. 服务器接收到指定请求，执行自动部署脚本
4. 自动部署脚本执行代码拉取，移动文件等完成网站更新部署的操作。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;1. 设置 WebHooks&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/seewhite/cdns/imgs/hooks.png&quot; alt=&quot;设置 WebHooks&quot;&gt;&lt;/p&gt;
&lt;h4&gt;2. 编写服务脚本&lt;/h4&gt;
&lt;p&gt;作者在这里使用 Node 编写，当然，使用任意一种服务端语言皆可。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// server.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;http&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; createHandler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;github-webhook-handler&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// secret 与 GitHub Hooks 后台设置保持一致&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; handler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; secret&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;xxx&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; spawn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;child_process&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spawn&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; resp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; resp &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;end&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;404&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;no such location&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Error:&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

handler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;push&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Received a push event for %s to %s&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;repository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ref&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 执行自动部署脚本&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;sh&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./deploy.sh&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;repository&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3. 编写 shell 脚本&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 网站的根目录&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;WEB_PATH&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;xxx&apos;&lt;/span&gt;

&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;start deployment&quot;&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$WEB_PATH&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fetching from remote...&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 为了避免冲突，强制更新本地文件&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; fetch --all
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset --hard origin/master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;大体细节如此，当然实际还要视各自的项目细节而论。
但不论如何变化，本质始终不会有很大的区别。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Date]]></title><description><![CDATA[若创建一个 JavaScript Date实例，该实例将会呈现某个时刻。 Date 对象基于 Unix Time Stamp，即自 1970年1月1日 (UTC) 起经过的毫秒数。 对于在计算机世界里获取现实时间，每种语言都有各自的实现。 这里介绍的只是 JavaScript…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/date/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/date/</guid><pubDate>Mon, 07 Dec 2020 09:30:36 GMT</pubDate><content:encoded>&lt;p&gt;若创建一个 JavaScript Date实例，该实例将会呈现某个时刻。&lt;/p&gt;
&lt;p&gt;Date 对象基于 &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16&quot;&gt;Unix Time Stamp&lt;/a&gt;，即自 1970年1月1日 (UTC) 起经过的毫秒数。&lt;/p&gt;
&lt;p&gt;对于在计算机世界里获取现实时间，每种语言都有各自的实现。&lt;/p&gt;
&lt;p&gt;这里介绍的只是 JavaScript 语言的实现，不光每种语言的实现有差异，实现的标准依据也有差异。&lt;/p&gt;
&lt;h3&gt;时间标准&lt;/h3&gt;
&lt;p&gt;光是时间标准便有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GMT: Greenwich Mean Time 格林威治标准时间。&lt;/p&gt;
&lt;p&gt;这是以英国格林威治天文台根据地球自转与公转观测结果得出的时间，亦是格林威治当地时间，过去被当成世界标准时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UTC: Coordinated Universal Time 协调世界时。&lt;/p&gt;
&lt;p&gt;是目前最主要的世界时标准，以原子时秒长为基础，在时刻上尽量接近于格林威治标准时间，并通过不规则的加入闰秒来抵消地球自转变慢的影响，也是计算机语言实现日期时间最主要的依据。关于更多可访问 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6&quot;&gt;维基百科&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不仅于此，还有获取日期时间后的格式化处理，也是会令我们产生困扰的一大因素。&lt;/p&gt;
&lt;p&gt;在 JS 中，如果要获取具体某个日期的时间戳可能会进行如下操作:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; date &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2020-12-02&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; timeStamp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;date: %o\nts: %d&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; date&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; timeStamp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/*
* date: Wed Dec 02 2020 08:00:00 GMT+0800 (中国标准时间)
  ts: 1606867200000
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;若存在这样一个场景，需要判断在指定日期之前，做一些业务逻辑处理。如果我们以上面代码的方式去获取指定日期，便会溢出一个八小时的区间，这肯定是不严谨的甚至算是一个 BUG 了。&lt;/p&gt;
&lt;p&gt;那么，如此结果是为何呢？&lt;/p&gt;
&lt;h3&gt;new Date形参&lt;/h3&gt;
&lt;p&gt;我们知道，&lt;code class=&quot;language-text&quot;&gt;Date()&lt;/code&gt; 构造函数具有四种接受参数的形式。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 无参数 那么新的实例对象表示实例化时刻的日期时间。

2. Unix 时间戳 如：1606867200000。

3. dateString 表示日期的字符串值 如：&amp;#39;2020-12-02&amp;#39;。

4. 分别提供日期与时间，以逗号分隔。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;未完待续…&lt;/p&gt;</content:encoded></item><item><title><![CDATA[音乐于我]]></title><description><![CDATA[…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/music/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/music/</guid><pubDate>Sat, 28 Nov 2020 09:07:55 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;清泉流淌，叮咚作响。穿越古今，横亘时空。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;不知几度春秋，花开雪融未觉。时已千年，江山多迭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;君埋泉下泥销骨，人间绝色自此无。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;纵物换星移，黄土垒垒。任尔东去不复返，君不见，阳春白雪又相融，高山流水觅知音。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也许，这便是文字与音乐同样教以人类的。生命短暂，何苦痴缠贪婪浮华，不过身外浮云耳。三千世界，茫茫众生，唯余人绵绵情感之永恒敬意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;在我年幼时候，我跟大多数同龄人一般，并没什么两样，直到现在，也是如此。&lt;/p&gt;
&lt;p&gt;二十一世纪初，远非如今互联网普及所带来的信息通畅便利。人们获取信息来源亦是非常之单一，由今论昔，虽已今非昔比，却时常怀念那个单纯年代里的一切。&lt;/p&gt;
&lt;p&gt;我对于音乐的喜好养成，很大程度上来源于一位温柔美丽，善良坚强的女性—我的母亲。&lt;/p&gt;
&lt;p&gt;母亲出身在当时算是富庶之家，外祖父母高中自由恋爱成家，后外祖父弃笔与绶，转而经商。一番努力，略有积攒，使得家庭衣食无忧，那个年代的稀罕物对于母亲她们只是普通之流。母亲排行老大，下有两个妹妹一个弟弟。父母在外奔波打拼，彼时母亲虽也年幼，却也一边读书一边照顾家小，后难兼顾，终于辍学。其实母亲当时已是校园焦点，虽有遗憾，却也无济于事，归于时代选择。&lt;/p&gt;
&lt;p&gt;一方面，在母亲的影响下，自幼我听的便是些徐怀钰的《踏浪》，叶倩文的《潇洒走一回》…同时，也通过父亲年轻时购买的碟片接触到了来自于港澳台，西方的一些歌曲。席琳迪翁的《My Heart Will Go On》，迈克尔杰克逊的《Beat It》等等，这些在如今看来称得上金曲的一些作品，为我最初的听音观做了一些基础建设。&lt;/p&gt;
&lt;p&gt;零四年，我接触到了互联网，千千静听，第一次听到张雨生的《大海》。渐渐地，我开始自己在网络世界里寻找音乐。小学，初中，高中，大学…&lt;/p&gt;
&lt;p&gt;时至今日，音乐已成为我生命里，生活中不可割舍的一部分。如果白天有十二个小时，那么我会有至少八小时的时间在听音乐。音乐于我，已非单纯的听觉快感，精神满足。借助音乐，我不断探寻世界的真相，生活的本质。&lt;/p&gt;
&lt;p&gt;话说工欲善其事必先利其器，既然享受音乐，那么工具也要搭配适宜。&lt;/p&gt;
&lt;p&gt;个人听音不喜音染，希望听到的是最真实还原，自然之声。&lt;/p&gt;
&lt;p&gt;鄙人听音设备如下，仅供同好参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;播放器：Sony NW-WM1A(黑砖)、 Iphone 11直推&lt;/li&gt;
&lt;li&gt;耳机：Sony IER-M9(动铁)、Weston Um Pro 50(动铁/现用)&lt;/li&gt;
&lt;li&gt;线材：Sony MUC-M12SB1(金宝线)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，器械质量并非与听音有着直接关联。即使器械再好，有多清晰，也抵不过多年前的午后，我听着母亲送我的一副平头塞，那一刻与音乐的共鸣，止不住地泪流满面。我相信，热爱音乐的人，始终是一位善良，真诚，性情中人。明白了生活的真相，却仍勇敢面对生活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于音乐，风格喜好因人而异，因此或多或少会带着一些主观感情色彩，如有分歧，君子和而不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;愿大家都能在这凡尘俗世里，找到属于自己的那一份快乐。&lt;/strong&gt;&lt;/p&gt;</content:encoded></item></channel></rss>